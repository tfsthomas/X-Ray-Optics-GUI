from tkinter import ttk
from tkinter import *
from tkinter import messagebox
from tkinter import filedialog
import tkinter as tk
import matplotlib
import matplotlib.pyplot as plt
matplotlib.use('TkAgg')
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg, NavigationToolbar2TkAgg
from matplotlib.figure import Figure
from matplotlib import gridspec
import numpy as np
import queue
import os
import sys
import ctypes
import serial
import sched
import time
from OWISLINEARMOTOR import *
phym1 = PhyMotionController('COM11')

import threading
threads = []


plt.rc('font', **{'size': 14})

q1 = queue.Queue()

# def do_stuff():
#     threading.Timer(1, do_stuff).start()
#     q1.put('update position')
#
# do_stuff()



# class NewCBox(ttk.Combobox):
#     def __init__(self, master, dictionary, current=0, *args, **kw):
#         ttk.Combobox.__init__(self, master, values=list(dictionary.keys()), state='readonly', *args, **kw)
#         self.dictionary = dictionary
#         self.set(current)
#
#     def value(self):
#         return self.dictionary[self.get()]
#
#
class LabelWithEntry(tk.Frame):
    def __init__(self, master, text, width_label=10, width_entry=20, *args, **kwargs):
        super().__init__(master, *args, **kwargs)
        self.label = ttk.Label(self, text=text, width=width_label)
        self.label.grid(row=0, column=0)

        self.entry = ttk.Entry(self, width=width_entry)
        self.entry.grid(row=0, column=1)

    def get(self):
        return self.entry.get()

    def set(self, value):
        self.entry.delete(0, END)
        self.entry.insert(0, value)


class SettingsWindow(tk.Toplevel):
    def __init__(self, master, *args, **kwargs):
        super().__init__(master, *args, **kwargs)

        self.master = master

        self.frequency_x = LabelWithEntry(self, text='Frequency X:', width_label=15, width_entry=5)
        self.frequency_x.set(phym1.send_command('3.1P14R'))
        self.frequency_x.grid(row=0, column=0)
        self.frequency_y = LabelWithEntry(self, text='Frequency Y:', width_label=15, width_entry=5)
        self.frequency_y.set(phym1.send_command('4.1P14R'))
        self.frequency_y.grid(row=1, column=0)
        self.frequency_z = LabelWithEntry(self, text='Frequency Z:', width_label=15, width_entry=5)
        self.frequency_z.set(phym1.send_command('5.1P14R'))
        self.frequency_z.grid(row=2, column=0)

        self.apply_button = Button(self, text='Apply', command=self.apply_parameters).grid(row=3, column=0)

    def apply_parameters(self):
        config_axis3 = {'axis': 3, 'frequency': int(self.frequency_x.get())}
        config_axis4 = {'axis': 4, 'frequency': int(self.frequency_y.get())}
        config_axis5 = {'axis': 5, 'frequency': int(self.frequency_z.get())}
        phym1.axes_config = [config_axis3, config_axis4, config_axis5]


        # self.x_label = Label(self, text=phym1.axes_config[2]).grid(row=0, column=0, pady=15)
        # self.x_label = Label(self, text=phym1.axes_config[3]).grid(row=1, column=0, pady=15)
        # self.x_label = Label(self, text=phym1.axes_config[4]).grid(row=2, column=0, pady=15)

        # self.x_axis_label = Label(self, text='axis:', width=15).grid(row=0, column=0, sticky=W)
        # self.x_axis_entry = Label(self, text='3', width=5).grid(row=0, column=1, sticky=E)
        # self.x_active_label = Label(self, text='active:', width=15).grid(row=1, column=0, sticky=W)
        # self.x_active_entry = Label(self, text='True', width=5).grid(row=1, column=1, sticky=E)
        # self.x_moving_label = Label(self, text='moving:', width=15).grid(row=2, column=0, sticky=W)
        # self.x_moving_entry = Label(self, text='False', width=5).grid(row=2, column=1, sticky=E)
        # self.x_frequency_label = Label(self, text='frequency:', width=15).grid(row=3, column=0, sticky=W)
        # self.x_frequency_entry = Label(self, text='6000', width=5).grid(row=3, column=1, sticky=E)
        # self.x_rampfrequency_label= Label(self, text='rampfrequency:', width=15).grid(row=4, column=0, sticky=W)
        # self.x_rampfrequency_entry = Label(self, text='6000', width=5).grid(row=4, column=1, sticky=E)
        # self.x_stepresolution_label= Label(self, text='stepresolution:', width=15).grid(row=5, column=0, sticky=W)
        # self.x_stepresolution_entry = Label(self, text='9', width=5).grid(row=5, column=1, sticky=E)
        # self.x_laufcurrent_label = Label(self, text='laufcurrent:', width=15).grid(row=6, column=0, sticky=W)
        # self.x_laufcurrent_entry = Label(self, text='60', width=5).grid(row=6, column=1, sticky=E)

        # self.y_axis_label = Label(self, text='axis:', width=15).grid(row=0, column=2, sticky=W)
        # self.y_axis_entry = Label(self, text='4', width=5).grid(row=0, column=3, sticky=E)
        # self.y_active_label = Label(self, text='active:', width=15).grid(row=1, column=2, sticky=W)
        # self.y_active_entry = Label(self, text='True', width=5).grid(row=1, column=3, sticky=E)
        # self.y_moving_label = Label(self, text='moving:', width=15).grid(row=2, column=2, sticky=W)
        # self.y_moving_entry = Label(self, text='False', width=5).grid(row=2, column=3, sticky=E)
        # self.y_frequency_label = Label(self, text='frequency:', width=15).grid(row=3, column=2, sticky=W)
        # self.y_frequency_entry = Label(self, text='6000', width=5).grid(row=3, column=3, sticky=E)
        # self.y_rampfrequency_label = Label(self, text='rampfrequency:', width=15).grid(row=4, column=2, sticky=W)
        # self.y_rampfrequency_entry = Label(self, text='6000', width=5).grid(row=4, column=3, sticky=E)
        # self.y_stepresolution_label = Label(self, text='stepresolution:', width=15).grid(row=5, column=2, sticky=W)
        # self.y_stepresolution_entry = Label(self, text='9', width=5).grid(row=5, column=3, sticky=E)
        # self.y_laufcurrent_label = Label(self, text='laufcurrent:', width=15).grid(row=6, column=2, sticky=W)
        # self.y_laufcurrent_entry = Label(self, text='60', width=5).grid(row=6, column=3, sticky=E)

        # self.z_axis_label = Label(self, text='axis:', width=15).grid(row=0, column=4, sticky=W)
        # self.z_axis_entry = Label(self, text='5', width=5).grid(row=0, column=5, sticky=E)
        # self.z_active_label = Label(self, text='active:', width=15).grid(row=1, column=4, sticky=W)
        # self.z_active_entry = Label(self, text='True', width=5).grid(row=1, column=5, sticky=E)
        # self.z_moving_label = Label(self, text='moving:', width=15).grid(row=2, column=4, sticky=W)
        # self.z_moving_entry = Label(self, text='False', width=5).grid(row=2, column=5, sticky=E)
        # self.z_frequency_label = Label(self, text='frequency:', width=15).grid(row=3, column=4, sticky=W)
        # self.z_frequency_entry = Label(self, text='5000', width=5).grid(row=3, column=5, sticky=E)
        # self.z_rampfrequency_label = Label(self, text='rampfrequency:', width=15).grid(row=4, column=4, sticky=W)
        # self.z_rampfrequency_entry = Label(self, text='6000', width=5).grid(row=4, column=5, sticky=E)
        # self.z_stepresolution_label = Label(self, text='stepresolution:', width=15).grid(row=5, column=4, sticky=W)
        # self.z_stepresolution_entry = Label(self, text='7', width=5).grid(row=5, column=5, sticky=E)
        # self.z_laufcurrent_label = Label(self, text='laufcurrent:', width=15).grid(row=6, column=4, sticky=W)
        # self.z_laufcurrent_entry = Label(self, text='60', width=5).grid(row=6, column=5, sticky=E)





class ShowStatus(tk.Frame):
    def __init__(self, master, *args, **kwargs):
        super().__init__(master, *args, **kwargs)
        self.master = master

        self.position_label = Label(master, text='Current Absolute Position', font=20).grid(row=0, column=1)

        self.load_file_x = Label(master, text=str(int(phym1.read_position(3))) + 'µm', fg='RoyalBlue3')
        self.load_file_x.grid(row=1, column=1)
        self.load_file_y = Label(master, text=str(int(phym1.read_position(4))) + 'µm', fg='DarkOrange1')
        self.load_file_y.grid(row=2, column=1)
        self.load_file_z = Label(master, text=str(int(phym1.read_position(5))) + 'µm', fg='forest green')
        self.load_file_z.grid(row=3, column=1)

    def update_position(self):
        self.load_file_x.config(text=str(int(phym1.read_position(3))) + 'µm')
        self.load_file_y.config(text=str(int(phym1.read_position(4))) + 'µm')
        self.load_file_z.config(text=str(int(phym1.read_position(5))) + 'µm')


class MoveMotors(tk.Frame):
    def __init__(self, master, *args, **kwargs):
        super().__init__(master, *args, **kwargs)
        self.master = master

        def del_entry_fields():
            self.e1.delete(0, END)
            self.e2.delete(0, END)
            self.e3.delete(0, END)

        def show_entry_fields():
            while True:
                try:
                    phym1.move_multiple_dist_abs([[3, int(self.e1.get())], [4, int(self.e2.get())], [5, int(self.e3.get())]])
                    q1.put('update position')
                    # self.e1.delete(0, END)
                    # self.e2.delete(0, END)
                    # self.e3.delete(0, END)
                    break
                except ValueError:
                    tk.messagebox.showerror('ValueError','Please input integers')
                    break
                except MotorOutOfRangeError:
                    tk.messagebox.showerror('MotorOutOfRangeError', 'Position is outside boundaries')
                    break

        def move_absolute_x():
            while True:
                try:
                    phym1.move_multiple_dist_abs([[3, int(self.e1.get())]])
                    q1.put('update position')
                    # self.e1.delete(0, END)
                    break
                except ValueError:
                    tk.messagebox.showerror('ValueError','Please input an integer')
                    break
                except MotorOutOfRangeError:
                    tk.messagebox.showerror('MotorOutOfRangeError', 'Position is outside boundaries')
                    break

        def move_absolute_y():
            while True:
                try:
                    phym1.move_multiple_dist_abs([[4, int(self.e2.get())]])
                    q1.put('update position')
                    # self.e2.delete(0, END)
                    break
                except ValueError:
                    tk.messagebox.showerror('ValueError','Please input an integer')
                    break
                except MotorOutOfRangeError:
                    tk.messagebox.showerror('MotorOutOfRangeError', 'Position is outside boundaries')
                    break

        def move_absolute_z():
            while True:
                try:
                    phym1.move_multiple_dist_abs([[5, int(self.e3.get())]])
                    q1.put('update position')
                    # self.e3.delete(0, END)
                    break
                except ValueError:
                    tk.messagebox.showerror('ValueError','Please input an integer')
                    break
                except MotorOutOfRangeError:
                    tk.messagebox.showerror('MotorOutOfRangeError', 'Position is outside boundaries')
                    break

        def move_relative(axis, direction):
            while True:
                try:
                    if axis == 3:
                        if direction == '+':
                            phym1.move_multiple_dist_rel([[3, int(self.E1.get())]])
                            print('hello')
                        if direction == '-':
                            phym1.move_multiple_dist_rel([[3, -int(self.E1.get())]])
                            print('hello')
                    if axis == 4:
                        if direction == '+':
                            phym1.move_multiple_dist_rel([[4, int(self.E2.get())]])
                            print('hello')
                        if direction == '-':
                            phym1.move_multiple_dist_rel([[4, -int(self.E2.get())]])
                            print('hello')
                    if axis == 5:
                        if direction == '+':
                            phym1.move_multiple_dist_rel([[5, int(self.E3.get())]])
                            print('hello')
                        if direction == '-':
                            phym1.move_multiple_dist_rel([[5, -int(self.E3.get())]])
                            print('hello')
                    q1.put('update position')
                    break
                except ValueError:
                    tk.messagebox.showerror('ValueError', 'Please input an integer')
                    break
                except MotorOutOfRangeError:
                    tk.messagebox.showerror('MotorOutOfRangeError', 'Position is outside boundaries')
                    break

        def move_relative_thread(axis, direction):
            t = threading.Thread(target=move_relative(axis, direction), args=(axis, direction))
            threads.append(t)
            t.start()

        # def increase_y():
        #     while True:
        #         try:
        #             phym1.move_multiple_dist_rel([[4, int(self.E2.get())]])
        #             q1.put('update position')
        #             break
        #         except ValueError:
        #             tk.messagebox.showerror('ValueError', 'Please input an integer')
        #             break
        #         except MotorOutOfRangeError:
        #             tk.messagebox.showerror('MotorOutOfRangeError', 'Position is outside boundaries')
        #             break
        #
        # def increase_z():
        #     while True:
        #         try:
        #             phym1.move_multiple_dist_rel([[5, int(self.E3.get())]])
        #             q1.put('update position')
        #             break
        #         except ValueError:
        #             tk.messagebox.showerror('ValueError', 'Please input an integer')
        #             break
        #         except MotorOutOfRangeError:
        #             tk.messagebox.showerror('MotorOutOfRangeError', 'Position is outside boundaries')
        #             break
        #
        # def decrease_x():
        #     while True:
        #         try:
        #             phym1.move_multiple_dist_rel([[3, -(int(self.E1.get()))]])
        #             q1.put('update position')
        #             break
        #         except ValueError:
        #             tk.messagebox.showerror('ValueError', 'Please input an integer')
        #             break
        #         except MotorOutOfRangeError:
        #             tk.messagebox.showerror('MotorOutOfRangeError', 'Position is outside boundaries')
        #             break
        #
        # def decrease_y():
        #     while True:
        #         try:
        #             phym1.move_multiple_dist_rel([[4, -(int(self.E2.get()))]])
        #             q1.put('update position')
        #             break
        #         except ValueError:
        #             tk.messagebox.showerror('ValueError', 'Please input an integer')
        #             break
        #         except MotorOutOfRangeError:
        #             tk.messagebox.showerror('MotorOutOfRangeError', 'Position is outside boundaries')
        #             break
        #
        # def decrease_z():
        #     while True:
        #         try:
        #             phym1.move_multiple_dist_rel([[5, -(int(self.E3.get()))]])
        #             q1.put('update position')
        #             break
        #         except ValueError:
        #             tk.messagebox.showerror('ValueError', 'Please input an integer')
        #             break
        #         except MotorOutOfRangeError:
        #             tk.messagebox.showerror('MotorOutOfRangeError', 'Position is outside boundaries')
        #             break

        def clear_entry_x():
            if self.e1.get() == 'Enter X position':
                self.e1.delete(0, END)

        def clear_entry_y():
            if self.e2.get() == 'Enter Y position':
                self.e2.delete(0, END)

        def clear_entry_z():
            if self.e3.get() == 'Enter Z position':
                self.e3.delete(0, END)

        def clear_step_x():
            if self.E1.get() == 'Enter X step':
                self.E1.delete(0, END)

        def clear_step_y():
            if self.E2.get() == 'Enter Y step':
                self.E2.delete(0, END)

        def clear_step_z():
            if self.E3.get() == 'Enter Z step':
                self.E3.delete(0, END)

        def set_as_new_zero():
            if tk.messagebox.askokcancel('Reset Zero Position?', 'Resetting the zero position of the linear stages will replace the saved absolute position of each axis with 0. Only reset when all stages have been centered to preserve functionality of boundaries.'):
                phym1.set_as_grand_zero_position()
                q1.put('update position')

        def move_to_zero():
            phym1.move_multiple_dist_abs([[3, 0], [4, 0], [5, 0]])
            q1.put('update position')

        self.absolute_label = Label(master, text='Absolute Movement', font=20).grid(row=0, column=2, columnspan=2)
        self.relative_label = Label(master, text='Relative Movement', font=20).grid(row=0, column=4, columnspan=3)

        self.x_label = Label(master, text='X axis:', fg='RoyalBlue3').grid(row=1, column=0)
        self.decrease_x_button = Button(master, text='-', command=lambda: move_relative_thread(3, '-'), fg='RoyalBlue3').grid(row=1, column=4, ipadx=4)
        self.e1 = Entry(master, fg='RoyalBlue3')
        self.e1.insert(0,'Enter X position')
        self.e1.bind('<Button-1>', lambda event: clear_entry_x())
        self.e1.bind("<Return>", lambda event: move_absolute_x())
        self.e1.grid(row=1, column=2, padx=(30,0), sticky=E)
        self.E1 = Entry(master, fg='RoyalBlue3')
        self.E1.insert(0,'Enter X step')
        self.E1.bind('<Button-1>', lambda event:clear_step_x())
        self.E1.grid(row=1, column=5)
        self.increase_x_button = Button(master, text='+', command=lambda: move_relative_thread(3, '+'), fg='RoyalBlue3').grid(row=1, column=6, ipadx=3)
        self.ok_button_x = Button(master, text='Move to X position', command=move_absolute_x, fg='RoyalBlue3').grid(row=1, column=3, ipadx=19.4, padx=(0,50), sticky=W)

        self.y_label = Label(master, text='Y axis:', fg='DarkOrange1').grid(row=2, column=0)
        self.decrease_y_button = Button(master, text='-', command=lambda: move_relative_thread(4, '-'), fg='DarkOrange1').grid(row=2, column=4, ipadx=4)
        self.e2 = Entry(master, fg='DarkOrange1')
        self.e2.insert(0, 'Enter Y position')
        self.e2.bind('<Button-1>', lambda event: clear_entry_y())
        self.e2.bind("<Return>", lambda event: move_absolute_y())
        self.e2.grid(row=2, column=2, padx=(30,0), sticky=E)
        self.E2 = Entry(master, fg='DarkOrange1')
        self.E2.insert(0, 'Enter Y step')
        self.E2.bind('<Button-1>', lambda event: clear_step_y())
        self.E2.grid(row=2, column=5)
        self.increase_y_button = Button(master, text='+', command=lambda: move_relative_thread(4, '+'), fg='DarkOrange1').grid(row=2, column=6, ipadx=3)
        self.ok_button_y = Button(master, text='Move to Y position', command=move_absolute_y, fg='DarkOrange1').grid(row=2, column=3, ipadx=19.4, padx=(0,50),sticky=W)

        self.z_label = Label(master, text='Z axis:', fg='forest green').grid(row=3, column=0)
        self.decrease_z_button = Button(master, text='-', command=lambda: move_relative_thread(5, '-'), fg='forest green').grid(row=3, column=4, ipadx=4)
        self.e3 = Entry(master, fg='forest green')
        self.e3.insert(0, 'Enter Z position')
        self.e3.bind('<Button-1>', lambda event: clear_entry_z())
        self.e3.bind("<Return>", lambda event: move_absolute_z())
        self.e3.grid(row=3, column=2, padx=(30,0), sticky=E)
        self.E3 = Entry(master, fg='forest green')
        self.E3.insert(0, 'Enter Z step')
        self.E3.bind('<Button-1>', lambda event: clear_step_z())
        self.E3.grid(row=3, column=5)
        self.increase_z_button = Button(master, text='+', command=lambda: move_relative_thread(5, '+'), fg='forest green').grid(row=3, column=6, ipadx=3)
        self.ok_button_z = Button(master, text='Move to Z position', command=move_absolute_z, fg='forest green').grid(row=3, column=3, ipadx=19.4, padx=(0,50), sticky=W)

        self.cancel_button = Button(master, text='Cancel', command=self.master.quit).grid(row=4, column=5)
        self.move_zero_pos_button = Button(master, text='Move to zero position', command=move_to_zero).grid(row=4, column=0)
        self.zero_pos_button = Button(master, text='Set as zero position', command=set_as_new_zero).grid(row=4, column=1)
        self.clear_button = Button(master, text='Clear', command=del_entry_fields).grid(row=4, column=2, sticky=E)
        self.ok_button = Button(master, text='Move to X,Y,Z coordinates', command=show_entry_fields, fg='magenta3').grid(row=4, column=3, padx=(0,50),sticky=W)


class EmbeddedFigure(tk.Frame):
    def __init__(self, master, *args, **kwargs):
        super().__init__(master, *args, **kwargs)
        self.master = master

        self.initial_pos_x = int(phym1.read_position(3))
        self.initial_pos_y = int(phym1.read_position(4))
        self.initial_pos_z = int(phym1.read_position(5))

        self.plot_arr_x = np.array([int(phym1.read_position(3))])
        self.plot_arr_y = np.array([int(phym1.read_position(4))])
        self.plot_arr_z = np.array([int(phym1.read_position(5))])
        self.plot_count_x = np.array([0])
        self.plot_count_y = np.array([0])
        self.plot_count_z = np.array([0])

        f = Figure(figsize=(8, 4), dpi=100)
        self.subplot = f.add_subplot(111)
        self.subplot.plot(self.plot_count_x, self.plot_arr_x - self.initial_pos_x)
        self.subplot.plot(self.plot_count_y, self.plot_arr_y - self.initial_pos_y)
        self.subplot.plot(self.plot_count_z, self.plot_arr_z - self.initial_pos_z)
        self.subplot.legend(['X', 'Y', 'Z'], loc='upper left')
        self.subplot.set_ylabel('Relative Position (µm)')

        self.canvas = FigureCanvasTkAgg(f, self)
        self.canvas.show()
        self.canvas.get_tk_widget().grid(row=5, column=0)

    # def read_gui_position(self, axis):
    #     pos = int(phym1.send_command(str(axis) + '.1P20R'))
    #     phym1.position_vec[axis - 1] = pos
    #     pos_micrometers = pos * phym1.calc_step_len(axis)
    #     return pos_micrometers
        # def clear_graph():
        #     self.subplot.cla()
        # self.clear_graph_button = Button(master, text='Clear Graph', command=clear_graph).grid(row=4, column = 0)

    def update_figure(self):
        # threading.Timer(1, self.update_figure).start()
        self.subplot.cla()
        self.plot_arr_x = np.append(self.plot_arr_x, int(phym1.read_position(3)))
        self.plot_arr_y = np.append(self.plot_arr_y, int(phym1.read_position(4)))
        self.plot_arr_z = np.append(self.plot_arr_z, int(phym1.read_position(5)))
        self.plot_count_x = np.append(self.plot_count_x, (self.plot_count_x[-1]) + 1)
        self.plot_count_y = np.append(self.plot_count_y, (self.plot_count_y[-1]) + 1)
        self.plot_count_z = np.append(self.plot_count_z, (self.plot_count_z[-1]) + 1)

        self.subplot.plot(self.plot_count_x, self.plot_arr_x - self.initial_pos_x, '-o')
        self.subplot.plot(self.plot_count_y, self.plot_arr_y - self.initial_pos_y, '-s')
        self.subplot.plot(self.plot_count_z, self.plot_arr_z - self.initial_pos_z, '-v')
        self.subplot.legend(['X', 'Y', 'Z'], loc='upper left')
        self.subplot.set_ylabel('Relative Position (µm)')

        plt.pause(.0001)
        self.canvas.draw()


        # toolbar = NavigationToolbar2TkAgg(canvas,self)
        # toolbar.update()
        # canvas._tkcanvas.grid(row=5, column=0)


class Application(tk.Frame):
    def __init__(self, master=None):
        tk.Frame.__init__(self, master)
        self.pack()
        self.master = master

        self.phym1 = phym1.init_xyz_xrayoptics()

        master.resizable(width=False, height=False)
        master.geometry('{}x{}'.format(900, 550))

        self.show_status = ShowStatus(self)
        self.show_status.grid(row=0, column=0)

        self.move_motors = MoveMotors(self)
        self.move_motors.grid(row=0, column=1)

        self.embedded_figure = EmbeddedFigure(self)
        self.embedded_figure.grid(row=5, column=0, columnspan=7)

        self.settings_window = None

        self.create_menubar()
        self.bind_global_commands()

        master.title('X-ray Optics Linear Stages')
        master.config(menu=self.menubar)
        master.protocol('WM_DELETE_WINDOW', self.quit_program)
        master.after(100, self.update_status)

    def update_status(self):
        root.after(100, self.update_status)
        if not q1.empty():
            q_el = q1.get()
            if q_el == 'update position':
                self.show_status.update_position()
                self.embedded_figure.update_figure()

    def create_menubar(self):
        self.menubar = tk.Menu(self, tearoff=0)
        self.filemenu = tk.Menu(self.menubar, tearoff=0)
        self.menubar.add_cascade(label="File", menu=self.filemenu)

        self.filemenu.add_separator()
        self.filemenu.add_command(label="Exit", command=self.quit_program, accelerator="Ctrl+q")
        self.filemenu.add_cascade(label='Frequencies', command= self.open_settings_window)
        self.filemenu.add_cascade(label='Step Length', command=self.step_length_popup)

        self.optionmenu = tk.Menu(self.menubar, tearoff=0)
        self.menubar.add_cascade(label="Options", menu=self.optionmenu)

        # self.optionmenu.add_command(label='Example', command=self.open_option_window)

    def step_length_popup(self):
        tk.messagebox.showinfo(title='Calculate Step Length', message='Step length X: '+ str(phym1.calc_step_len(3)) + ' µm' + '\n' + 'Step length Y: '+ str(phym1.calc_step_len(4)) + ' µm' + '\n' + 'Step length Z: '+ str(phym1.calc_step_len(5)) + ' µm')

    def open_settings_window(self):
        if self.settings_window is None or not self.settings_window.winfo_exists():
            self.settings_window = SettingsWindow(self)

    def quit_program(self):
        self.master.destroy()

    def bind_global_commands(self):
        self.bind_all('<Control-q>', lambda event: self.quit_program())

root = tk.Tk()
app = Application(master=root)
root.mainloop()